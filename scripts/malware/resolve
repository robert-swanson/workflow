#!/bin/bash
# Written and maintained by Cardinal
# Last modified: 6/14/2019

FINAL_EXIT=0
OVERWRITE=0
declare FILES_FOUND

if [ ! -f "mod.dep" ]; then
	printf "WARNING: Couldn't find a 'mod.dep'.\n\n"
fi

printf "Fetching to ensure all branches are up-to-date...\n"
git fetch --all >/dev/null 2>&1; printf "\n"

if [[ $1 == "-o" ]] || [[ $1 == "--overwrite" ]]; then
	OVERWRITE=1
	shift
fi

function resolve(){
	#Build out dependancies
	local args=( "$@" )
	while read -r line; do
		args+=( "`echo "$line"`" )
	done < "mod.dep"
	if [[ $args == "" ]]; then
		printf "WARNING: `pwd`/mod.dep is empty.\n"
	fi

	for i in ${args[@]}; do 
		#Check to see if dependent branch has already been searched for; continue if it has.
		local CHILD_PATH=${i%/}
		local found=0
		for file_found in ${FILES_FOUND[@]}; do
			if [[ $file_found =~ ^$branch$ ]]; then
				found=1
				break
			fi
		done
		if [[ $found == 1 ]]; then
			continue
		fi
		FILES_FOUND+=( "$branch" )

		printf "Checking for $CHILD_PATH...\n"

		#If the child directory doesn't exist or the overwrite flag is set
		if [ ! -d "$CHILD_PATH" ] || [[ $OVERWRITE == 1 ]]; then
			#Check the remote branch with $CHILD_PATH's name
			local branch="origin/${CHILD_PATH##*/}"
			if [[ $OVERWRITE == 0 ]]; then
				printf "Could not find $CHILD_PATH, will try to retrieve from $branch.\n"
			fi

			#Try to checkout the file from the branch
			git checkout $branch -- $CHILD_PATH > /dev/null 2>&1
			local exit_code=$?
			if [[ $exit_code != 0 ]]; then
				git checkout origin/master -- $CHILD_PATH > /dev/null 2>&1
				exit_code=$?
				if [[ $exit_code != 0 ]]; then
					printf "ERR: Could not find $CHILD_PATH.\n\n"
					FINAL_EXIT=$(( exit_code | FINAL_EXIT ))
					return $FINAL_EXIT
				fi
			fi
			printf "Retrieved $CHILD_PATH!\n"

			#Make sure git doesn't start tracking files that are checked out
			git rm -r --cached $CHILD_PATH 2>&1>/dev/null
		else
			printf "Found $CHILD_PATH!\n"
		fi; printf "\n"

		#If the child path is there after execution
		if [ -d "$CHILD_PATH" ]; then
			local wd=`pwd`
			cd $CHILD_PATH
			if [ -f "mod.dep" ]; then
				resolve
			fi
			cd $wd
		fi;
	done
}

resolve "$@"
if [[ $FINAL_EXIT != 0 ]]; then
	printf "Not all depencencies could be loaded.\n"
else
	printf "All dependencies are loaded! Enjoy testing!\n~Cardinal\n"
fi
exit $FINAL_EXIT
