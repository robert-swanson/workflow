#!/usr/bin/env python3
import argparse
import os
import shutil
import sys

sys.path.append(os.environ.get("WORKFLOW_PATH"))

from workflow_py.var_store import VAR_STORE
from workflow_py.path_object.script.script import Script
from workflow_py.path_object.script.local_script_utils import get_local_script
from workflow_py.path_object.script.saved_script_utils import get_saved_script, validate_script_name_available
from workflow_py.path_object.category.category_utils import get_host_categories
from workflow_py.path_object.category.category import Category
from workflow_py.utils import fzf_select_one, bash

parser = argparse.ArgumentParser(description="Rename a script")
parser.add_argument("old_name", type=str, nargs="?", help="name of script to edit")
parser.add_argument("new_name", type=str, nargs="?", help="name of script to edit")
parser.add_argument("-c", "--category", default=None, type=str, help="category of script (required if script name is ambiguous across categories)")
args = parser.parse_args()

if args.old_name:
    saved_script, category = get_saved_script(args.old_name, args.category)
    local_script = get_local_script(args.old_name)
else:
    if args.category:
        categories = [get_category_with_name(args.category)]
    else:
        categories = get_host_categories()
    scripts = [script for category in categories for script in category.get_saved_scripts()]
    saved_script: Script = fzf_select_one(scripts, prompt="Select script to rename: ")
    category = Category(saved_script.get_category_path())
    local_script = get_local_script(saved_script.name)

new_name = args.new_name
if not new_name:
    new_name = input(f"new name for script '{saved_script.name}' in category '{category}: ")
validate_script_name_available(new_name)

bash("git", "mv", saved_script.path, category.path / new_name)
bash("mv", local_script.path, VAR_STORE.get_local_scripts_dir() / new_name)
print(f"Renamed {saved_script.name} to {new_name} in category {category.name}")
