#!/usr/bin/env python3
import argparse
import os
import sys
from pathlib import Path

from workflow_py.path_object.script.saved_script_utils import choose_template, make_saved_script
from workflow_py.path_object.script.script import Script
from workflow_py.utils import fzf_select_multiple, fzf_select_one, bash
from workflow_py.var_store import VAR_STORE

sys.path.append(os.environ.get("WORKFLOW_PATH"))

from workflow_py.path_object.category.category_utils import get_host_categories, get_category_with_name

parser = argparse.ArgumentParser(description="List categories or scripts in a category")
parser.add_argument("-a", "--list-all", default=False, action="store_true",
                    help="lists all categories, even those ignored by this host")
parser.add_argument("category", nargs="?", type=str, help="category to list scripts from")
args = parser.parse_args()


def list_category_scripts(category_str):
    category = get_category_with_name(category_str)
    scripts = category.get_saved_scripts()
    ns_script = Script(Path("<make_new_script_in_category>"))
    script = fzf_select_one([ns_script] + scripts, prompt=f"Select script to run from '{category.name}'")
    if script == ns_script:
        script_name = input(f"Name for new script to make inside {category}: ")
        template = choose_template(prompt=f"Choose template for new script '{script_name}'")
        new_saved_script = make_saved_script(script_name, category, template)
        bash("vim", new_saved_script.path)
        new_saved_script.write_to_dir(VAR_STORE.get_local_scripts_dir())
    else:
        script.run()


if args.category:
    list_category_scripts(args.category)
else:
    category_names = [category.name for category in get_host_categories(get_all=args.list_all)]
    selection = fzf_select_one(category_names)
    list_category_scripts(selection)
